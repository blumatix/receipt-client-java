/*
 * Receipt API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.RequestBody;
import okhttp3.MediaType;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;
import org.openapitools.client.FileData;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceiptApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReceiptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceiptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1ReceiptPost
     * @param xApiKey The customer&#39;s application key. Required for authentication (required)
     * @param xApiIdentifier The customer&#39;s api identifier key. Not required for authentication (optional)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ReceiptPostCall(String xApiKey, String xApiIdentifier, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/receipt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-ApiKey", localVarApiClient.parameterToString(xApiKey));
        }

        if (xApiIdentifier != null) {
            localVarHeaderParams.put("X-ApiIdentifier", localVarApiClient.parameterToString(xApiIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    /**
     * Build call for v1ReceiptPost
     * @param xApiKey The customer&#39;s application key. Required for authentication (required)
     * @param xApiIdentifier The customer&#39;s api identifier key. Not required for authentication (optional)
     * @param fileData FileData instance
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ReceiptPostCall(String xApiKey, String xApiIdentifier, FileData fileData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else {
            basePath = localVarApiClient.getBasePath();
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/receipt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileData != null) {
            localVarFormParams.put("file", fileData);  // Ensure 'file' is the expected field name
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-ApiKey", localVarApiClient.parameterToString(xApiKey));
        }

        if (xApiIdentifier != null) {
            localVarHeaderParams.put("X-ApiIdentifier", localVarApiClient.parameterToString(xApiIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }    

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ReceiptPostValidateBeforeCall(String xApiKey, String xApiIdentifier, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling v1ReceiptPost(Async)");
        }

        return v1ReceiptPostCall(xApiKey, xApiIdentifier, _file, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ReceiptPostValidateBeforeCall(String xApiKey, String xApiIdentifier, FileData byteData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling v1ReceiptPost(Async)");
        }

        return v1ReceiptPostCall(xApiKey, xApiIdentifier, byteData, _callback);

    }    

    /**
     * @param xApiKey The customer&#39;s application key. Required for authentication (required)
     * @param xApiIdentifier The customer&#39;s api identifier key. Not required for authentication (optional)
     * @param _file  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public String v1ReceiptPost(String xApiKey, String xApiIdentifier, File _file) throws ApiException {
        ApiResponse<String> resp = v1ReceiptPostWithHttpInfo(xApiKey, xApiIdentifier, _file);
        return resp.getData(); // This will return the raw JSON response as a string
    }

    // Synchronous wrapper
    public String v1ReceiptPost(String xApiKey, String xApiIdentifier, FileData fileData) throws ApiException {
        ApiResponse<String> resp = v1ReceiptPostWithHttpInfo(xApiKey, xApiIdentifier, fileData);
        return resp.getData();
    }    

    /**
     * 
     * 
     * @param xApiKey The customer&#39;s application key. Required for authentication (required)
     * @param xApiIdentifier The customer&#39;s api identifier key. Not required for authentication (optional)
     * @param _file  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1ReceiptPostWithHttpInfo(String xApiKey, String xApiIdentifier, File _file) throws ApiException {
        okhttp3.Call localVarCall = v1ReceiptPostValidateBeforeCall(xApiKey, xApiIdentifier, _file, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType(); // This specifies that the response should be treated as a raw String.
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    public ApiResponse<String> v1ReceiptPostWithHttpInfo(String xApiKey, String xApiIdentifier, FileData byteData) throws ApiException {
        okhttp3.Call localVarCall = v1ReceiptPostValidateBeforeCall(xApiKey, xApiIdentifier, byteData, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType(); // This specifies that the response should be treated as a raw String.
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }    


    /**
     *  (asynchronously)
     * 
     * @param xApiKey The customer&#39;s application key. Required for authentication (required)
     * @param xApiIdentifier The customer&#39;s api identifier key. Not required for authentication (optional)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ReceiptPostAsync(String xApiKey, String xApiIdentifier, File _file, final ApiCallback<String> _callback) throws ApiException {
        okhttp3.Call localVarCall = v1ReceiptPostValidateBeforeCall(xApiKey, xApiIdentifier, _file, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    // Asynchronous wrapper
    public okhttp3.Call v1ReceiptPostAsync(String xApiKey, String xApiIdentifier, FileData fileData, final ApiCallback<String> _callback) throws ApiException {
        okhttp3.Call localVarCall = v1ReceiptPostValidateBeforeCall(xApiKey, xApiIdentifier, fileData, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }    
}
